<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蔡朱奎的博客</title>
  
  <subtitle>主动一点，世界会更大</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.caizhukui.site/"/>
  <updated>2018-12-18T09:07:50.228Z</updated>
  <id>https://www.caizhukui.site/</id>
  
  <author>
    <name>蔡朱奎</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「美剧字幕站」数据库设计</title>
    <link href="https://www.caizhukui.site/ustvseries-db-design/"/>
    <id>https://www.caizhukui.site/ustvseries-db-design/</id>
    <published>2018-12-18T09:07:29.000Z</published>
    <updated>2018-12-18T09:07:50.228Z</updated>
    
    <summary type="html">
    
      「美剧字幕站」数据库设计
    
    </summary>
    
      <category term="UsTvSeries" scheme="https://www.caizhukui.site/categories/UsTvSeries/"/>
    
    
      <category term="DB" scheme="https://www.caizhukui.site/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>Jackson注解大全</title>
    <link href="https://www.caizhukui.site/jackson-annotations/"/>
    <id>https://www.caizhukui.site/jackson-annotations/</id>
    <published>2018-12-18T07:59:41.000Z</published>
    <updated>2018-12-18T09:15:23.108Z</updated>
    
    <content type="html"><![CDATA[<h5 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h5><p>@JsonProperty标记在属性或者Getter方法上，用于指定别名。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"email"</span>)</span><br><span class="line"><span class="keyword">private</span> EmailAddress emailAddress;</span><br></pre></td></tr></table></figure></p><h5 id="JsonIgnoreProperties、-JsonIgnore"><a href="#JsonIgnoreProperties、-JsonIgnore" class="headerlink" title="@JsonIgnoreProperties、@JsonIgnore"></a>@JsonIgnoreProperties、@JsonIgnore</h5><p>用于在Json序列化时将Java Bean中的一些属性忽略掉，序列化和反序列化都受影响。@JsonIgnoreProperties标记在类上，@JsonIgnore标记在属性或者方法上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123; <span class="string">"internalValue1"</span>, <span class="string">"internalValue2"</span> &#125;) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer value;</span><br><span class="line">  <span class="keyword">private</span> Integer internalValue1;</span><br><span class="line">  <span class="keyword">private</span> Integer internalValue2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer value;</span><br><span class="line">  <span class="meta">@JsonIgnore</span></span><br><span class="line">  <span class="keyword">private</span> Integer internalValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过@JsonIgnoreProperties注解可以简单地忽略掉Json中多余的属性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Integer value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="JsonSerialize、-JsonDeserialize"><a href="#JsonSerialize、-JsonDeserialize" class="headerlink" title="@JsonSerialize、@JsonDeserialize"></a>@JsonSerialize、@JsonDeserialize</h5><p>@JsonSerialize标记在属性或者Getter方法上，用于自定义序列化规则；@JsonDeserialize标记在属性或者Setter方法上，用于自定义反序列化规则。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using = EmailAddressSerializer.class)</span><br><span class="line"><span class="meta">@JsonDeserialize</span>(using = EmailAddressDeserializer.class)</span><br><span class="line"><span class="keyword">private</span> EmailAddress emailAddress;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(EmailAddress value, JsonGenerator jgen,</span></span></span><br><span class="line"><span class="function"><span class="params">        SerializerProvider provider)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">        JsonProcessingException </span>&#123;</span><br><span class="line">  ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">  mapper.writeValue(jgen, value.getEmail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h5><p>@JsonFormat标记在属性或者方法上，最常见的使用场合是指定Date类型的格式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line"><span class="keyword">private</span> Date date;</span><br></pre></td></tr></table></figure></p><h5 id="JsonCreator"><a href="#JsonCreator" class="headerlink" title="@JsonCreator"></a>@JsonCreator</h5><h5 id="JsonTypeInfo"><a href="#JsonTypeInfo" class="headerlink" title="@JsonTypeInfo"></a>@JsonTypeInfo</h5><h5 id="JsonAutoDetect"><a href="#JsonAutoDetect" class="headerlink" title="@JsonAutoDetect"></a>@JsonAutoDetect</h5><p>@JsonAutoDetect用于修改Jackson默认的属性发现规则。Jackson默认会查找如下属性：</p><ul><li>所有被public修饰的属性</li><li>所有被public修饰的Getter方法</li><li>所有被public修饰的Setter方法，不管可见或不可见</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonAutoDetect</span>(fieldVisibility = JsonAutoDetect.Visibility.ANY) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POJOWithFields</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Jackson注解大全
    
    </summary>
    
      <category term="Java" scheme="https://www.caizhukui.site/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.caizhukui.site/tags/Java/"/>
    
      <category term="Json" scheme="https://www.caizhukui.site/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>JPA注解大全</title>
    <link href="https://www.caizhukui.site/jpa-annotations/"/>
    <id>https://www.caizhukui.site/jpa-annotations/</id>
    <published>2018-12-04T05:20:12.000Z</published>
    <updated>2018-12-11T12:56:21.738Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Entity、-Embeddable"><a href="#Entity、-Embeddable" class="headerlink" title="@Entity、@Embeddable"></a>@Entity、@Embeddable</h5><h5 id="MappedSuperclass"><a href="#MappedSuperclass" class="headerlink" title="@MappedSuperclass"></a>@MappedSuperclass</h5><p>该注解使用在父类上面，标识的类不能映射到数据库表，但是它所拥有的属性能够映射在其子类对用的数据库表中。标识了该注解的类中不能再使用@Entity或@Table注解，但是可以使用@Id和@Column注解。</p><h5 id="ElementCollection"><a href="#ElementCollection" class="headerlink" title="@ElementCollection"></a>@ElementCollection</h5><h5 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h5><h5 id="Column、-JoinColumn"><a href="#Column、-JoinColumn" class="headerlink" title="@Column、@JoinColumn"></a>@Column、@JoinColumn</h5><h5 id="ElementCollection-1"><a href="#ElementCollection-1" class="headerlink" title="@ElementCollection"></a>@ElementCollection</h5><h5 id="PersistenceContext"><a href="#PersistenceContext" class="headerlink" title="@PersistenceContext"></a>@PersistenceContext</h5>]]></content>
    
    <summary type="html">
    
      JPA注解大全
    
    </summary>
    
      <category term="Java" scheme="https://www.caizhukui.site/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.caizhukui.site/tags/Java/"/>
    
      <category term="JPA" scheme="https://www.caizhukui.site/tags/JPA/"/>
    
      <category term="ORM" scheme="https://www.caizhukui.site/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解大全</title>
    <link href="https://www.caizhukui.site/spring-annotations/"/>
    <id>https://www.caizhukui.site/spring-annotations/</id>
    <published>2018-11-16T05:59:23.000Z</published>
    <updated>2018-12-18T05:42:17.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h3><h5 id="Controller、-Service、-Repository、-Component"><a href="#Controller、-Service、-Repository、-Component" class="headerlink" title="@Controller、@Service、@Repository、@Component"></a>@Controller、@Service、@Repository、@Component</h5><h5 id="Resource、-Autowired、-Qualifier"><a href="#Resource、-Autowired、-Qualifier" class="headerlink" title="@Resource、@Autowired、@Qualifier"></a>@Resource、@Autowired、@Qualifier</h5><h5 id="Configuration、-Bean"><a href="#Configuration、-Bean" class="headerlink" title="@Configuration、@Bean"></a>@Configuration、@Bean</h5><p>@Configuration注解声明了一个类为Spring的JavaConfig配置类。</p><h5 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h5><h5 id="Profile"><a href="#Profile" class="headerlink" title="@Profile"></a>@Profile</h5><h5 id="EnableTransactionManager"><a href="#EnableTransactionManager" class="headerlink" title="@EnableTransactionManager"></a>@EnableTransactionManager</h5><h3 id="Spring对WebSocket的支持"><a href="#Spring对WebSocket的支持" class="headerlink" title="Spring对WebSocket的支持"></a>Spring对WebSocket的支持</h3><h5 id="EnableWebSocketMessageBroker"><a href="#EnableWebSocketMessageBroker" class="headerlink" title="@EnableWebSocketMessageBroker"></a>@EnableWebSocketMessageBroker</h5><p>该注解用于开启使用STOMP协议来传输基于代理（MessageBroker）的消息，这时候控制器（Controller）开始支持@MessageMapping，就像使用@RequestMapping一样。</p><h5 id="MessageMapping、-SendTo"><a href="#MessageMapping、-SendTo" class="headerlink" title="@MessageMapping、@SendTo"></a>@MessageMapping、@SendTo</h5><p>@MessageMapping和@RequestMapping功能类似，用于设置URL映射地址，浏览器向服务器发起请求，需要通过该地址。</p><a id="more"></a><h3 id="Spring-MVC注解"><a href="#Spring-MVC注解" class="headerlink" title="Spring MVC注解"></a>Spring MVC注解</h3><h5 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h5><p>组合注解，@RestController = @Controller + @ResponseBody</p><h5 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h5><p>如果没有指定请求方式，将接收Get、Post、Put、Delete、Head、Options等所有的请求方式。</p><h5 id="GetMapping、-PostMapping、-PutMapping、-DeleteMapping"><a href="#GetMapping、-PostMapping、-PutMapping、-DeleteMapping" class="headerlink" title="@GetMapping、@PostMapping、@PutMapping、@DeleteMapping"></a>@GetMapping、@PostMapping、@PutMapping、@DeleteMapping</h5><p>组合注解，@GetMapping = @RequestMapping(method = RequestMethod.GET)，其它类推。</p><h5 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h5><h5 id="PathVariable、-ReuqestParam、-RequestBody"><a href="#PathVariable、-ReuqestParam、-RequestBody" class="headerlink" title="@PathVariable、@ReuqestParam、@RequestBody"></a>@PathVariable、@ReuqestParam、@RequestBody</h5><h5 id="ResponseEntity、-ResponseBody、-ResponseStatus"><a href="#ResponseEntity、-ResponseBody、-ResponseStatus" class="headerlink" title="@ResponseEntity、@ResponseBody、@ResponseStatus"></a>@ResponseEntity、@ResponseBody、@ResponseStatus</h5><p>@ResponseEntity注解封装整个HTTP响应，包括状态码，标题和正文，可以用它来完全配置HTTP响应。</p><h5 id="ControllerAdvice、-RestControllerAdvice"><a href="#ControllerAdvice、-RestControllerAdvice" class="headerlink" title="@ControllerAdvice、@RestControllerAdvice"></a>@ControllerAdvice、@RestControllerAdvice</h5><p>在Spring 3.2中，新增了@ControllerAdvice注解，用于定义@ExceptionHandler、@InitBinder和@ModelAttribute方法，适用于所有标注了@RequestMapping的方法。<br>@RestControllerAdvice = @ControllerAdvice + @ResponseBody</p><h5 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h5><h5 id="ContextConfiguration"><a href="#ContextConfiguration" class="headerlink" title="@ContextConfiguration"></a>@ContextConfiguration</h5><p>Spring整合JUnit4测试时，使用该注解引入配置类或配置文件<br>@ContextConfiguration(locations = “../applicationContext.xml”)<br>@ContextConfiguration(classes = SimpleConfiguration.class)<br>@ContextConfiguration(locations = { “classpath<em>:/spring1.xml”, “classpath</em>:/spring2.xml” })<br>@ContextConfiguration(classes = { FirstConfiguration.class, SecondConfiguration.class })</p><h5 id="EnableCaching"><a href="#EnableCaching" class="headerlink" title="@EnableCaching"></a>@EnableCaching</h5><p>启用Spring通用缓存抽象。</p><h3 id="Spring-Security注解"><a href="#Spring-Security注解" class="headerlink" title="Spring Security注解"></a>Spring Security注解</h3><h5 id="EnableWebSecurity"><a href="#EnableWebSecurity" class="headerlink" title="@EnableWebSecurity"></a>@EnableWebSecurity</h5><h3 id="Spring-Boot注解"><a href="#Spring-Boot注解" class="headerlink" title="Spring Boot注解"></a>Spring Boot注解</h3><h5 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h5><p>Spring Boot项目的配置注解，在Spring Boot项目中推荐使用该注解来替代@Configuration注解。</p><h5 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h5><p>启动自动配置，该注解会让Spring Boot根据当前项目所依赖的jar包自动配置项目的相关配置项。</p><h5 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h5><p>组合注解，@SpringBootApplication = @SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan<br>@SpringBootApplication是Spring Boot的核心注解，用此注解标注的入口类是应用的启动类。Spring Boot默认会扫描该注解所在类的同级包以及它的子包，建议将该注解修饰的入口类放置在项目包下，以保证能自动扫描到项目所有的包。</p><h5 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h5><h5 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass"></a>@ConditionalOnClass</h5><p>条件注解，只有当指定的类都存在时才执行被标注的配置类。<br>@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurerAdapter.class })</p><h5 id="ConditionalOnMissingBean"><a href="#ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnMissingBean"></a>@ConditionalOnMissingBean</h5><p>条件注解，只有当指定的类都不存在时才执行被标注的配置类。<br>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</p><h5 id="SpringBootTest"><a href="#SpringBootTest" class="headerlink" title="@SpringBootTest"></a>@SpringBootTest</h5><h3 id="Spring-Data注解"><a href="#Spring-Data注解" class="headerlink" title="Spring Data注解"></a>Spring Data注解</h3><h5 id="EnableJpaRepositories"><a href="#EnableJpaRepositories" class="headerlink" title="@EnableJpaRepositories"></a>@EnableJpaRepositories</h5><h5 id="RepositoryDefinition"><a href="#RepositoryDefinition" class="headerlink" title="@RepositoryDefinition"></a>@RepositoryDefinition</h5><p>在接口上标注该注解的效果跟继承Repository接口等效。</p><h5 id="NoRepositoryBean"><a href="#NoRepositoryBean" class="headerlink" title="@NoRepositoryBean"></a>@NoRepositoryBean</h5><p>Spring Data不会为标注了该注解的接口创建代理。</p><h5 id="Query"><a href="#Query" class="headerlink" title="@Query"></a>@Query</h5><h4 id="Spring-Data-MongoDB"><a href="#Spring-Data-MongoDB" class="headerlink" title="Spring Data MongoDB"></a>Spring Data MongoDB</h4><h5 id="EnableMongoRepositories"><a href="#EnableMongoRepositories" class="headerlink" title="@EnableMongoRepositories"></a>@EnableMongoRepositories</h5><h5 id="Document、-DBRef、-Field、-Index、-CompoundIndex"><a href="#Document、-DBRef、-Field、-Index、-CompoundIndex" class="headerlink" title="@Document、@DBRef、@Field、@Index、@CompoundIndex"></a>@Document、@DBRef、@Field、@Index、@CompoundIndex</h5><h4 id="Spring-Data-Neo4j"><a href="#Spring-Data-Neo4j" class="headerlink" title="Spring Data Neo4j"></a>Spring Data Neo4j</h4><h5 id="NodeEntity、-RelationshipEntity、-RelatedTo、-Indexed、-GraphId、-GraphProperty"><a href="#NodeEntity、-RelationshipEntity、-RelatedTo、-Indexed、-GraphId、-GraphProperty" class="headerlink" title="@NodeEntity、@RelationshipEntity、@RelatedTo、@Indexed、@GraphId、@GraphProperty"></a>@NodeEntity、@RelationshipEntity、@RelatedTo、@Indexed、@GraphId、@GraphProperty</h5><h4 id="Spring-Roo"><a href="#Spring-Roo" class="headerlink" title="Spring Roo"></a>Spring Roo</h4><h5 id="RooJavaBean、-RooToString、-RooJpaEntity"><a href="#RooJavaBean、-RooToString、-RooJpaEntity" class="headerlink" title="@RooJavaBean、@RooToString、@RooJpaEntity"></a>@RooJavaBean、@RooToString、@RooJpaEntity</h5><h5 id="RooConversionService"><a href="#RooConversionService" class="headerlink" title="@RooConversionService"></a>@RooConversionService</h5><h3 id="MyBatis-Spring整合注解"><a href="#MyBatis-Spring整合注解" class="headerlink" title="MyBatis-Spring整合注解"></a>MyBatis-Spring整合注解</h3><h5 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h5><p>MyBatis社区开发的MyBatis-Spring中间件提供的注解，用于配置需要扫描的MyBatis接口的包路径。Spring会自动扫描包下面的Java接口，把这些类注册为Spring的Bean。</p>]]></content>
    
    <summary type="html">
    
      Spring注解大全
    
    </summary>
    
      <category term="Java" scheme="https://www.caizhukui.site/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.caizhukui.site/tags/Java/"/>
    
      <category term="Web" scheme="https://www.caizhukui.site/tags/Web/"/>
    
      <category term="Spring" scheme="https://www.caizhukui.site/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.caizhukui.site/hello-world/"/>
    <id>https://www.caizhukui.site/hello-world/</id>
    <published>2018-11-16T05:13:36.366Z</published>
    <updated>2018-11-16T05:13:36.366Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
